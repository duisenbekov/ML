{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from math import sqrt\n",
    "import matplotlib.pyplot as plt\n",
    "from math import pow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array([15, 57, 69, 83, 73, 99, 105, 109, 140, 153])\n",
    "y = np.array([78, 79, 63, 67, 79, 80, 88, 116, 140, 125])\n",
    "x_pow = x**2\n",
    "y_pow = y**2\n",
    "xy = x*y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_avg = np.average(x)\n",
    "y_avg = np.average(y)\n",
    "y_pow_avg = np.average(y_pow)\n",
    "x_pow_avg = np.average(x_pow)\n",
    "_x = x_pow_avg - pow(x_avg, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov_xy = (xy.sum() / y.size) - (x_avg*y_avg)\n",
    "a = cov_xy / _x\n",
    "b = y_avg - a * x_avg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_ = lambda x: a * x + b\n",
    "graph = []\n",
    "for i in range(y.size):\n",
    "    graph.append(y_(x[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[54.166836431252094, 74.99011491581268, 80.93962305425856, 87.88071588244543, 82.92279243374053, 95.81339340037326, 98.78814746959621, 100.77131684907818, 116.14087954006337, 122.58618002337974] 0.4957923448704901 46.729951258194745\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb89a00cac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x, y, 'ro', color = 'r')\n",
    "plt.plot(x, graph, color = 'b')\n",
    "print(graph, a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
